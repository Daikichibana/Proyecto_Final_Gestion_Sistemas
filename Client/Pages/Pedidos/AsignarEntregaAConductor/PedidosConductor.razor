@inject IPedidosServices _pedidosServices
@inject IPersonalServices _personalServices
@inject IInventarioServices _inventarioServices
@inject IDistribuidorasServices _distribuidoraServices
@inject IJSRuntime JsRuntime
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

@if (ResponsePedido != null)
{
    <h4>Pedidos sin asignar</h4>
    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Nombre Cliente</th>
                <th scope="col">Necesita Factura</th>
                <th scope="col">Aclaracion cliente</th>
                <th scope="col">Metodo de Pago</th>
                <th scope="col">Estado del pago</th>
                <th scope="col">Estado del envio</th>
                <th scope="col">Opcion</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var pedido in ResponsePedido.Data)
            {
                <tr>
                    <td>@pedido.OrdenPedido.EmpresaCliente.NombreEmpresa</td>
                    <td>@(pedido.OrdenPedido.DeseaFactura == true ? "Si" : "No")</td>
                    <td>@pedido.OrdenPedido.AclaracionCliente</td>
                    <td>@pedido.OrdenPedido.MetodoPago</td>
                    <td>@pedido.EstadoPago</td>
                    <td>@pedido.EstadoEnvio</td>
                    <td>
                        <button class="btn btn-success" @onclick="() => AsignarPedido(pedido)">Asignar</button>
                    </td>
                </tr>

            }

        </tbody>
    </table>


    <h4>Pedidos asignados</h4>
    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Nombre Cliente</th>
                <th scope="col">Necesita Factura</th>
                <th scope="col">Aclaracion cliente</th>
                <th scope="col">Metodo de Pago</th>
                <th scope="col">Estado del pago</th>
                <th scope="col">Estado del envio</th>
                <th scope="col">Opcion</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var pedido in ListaPedidosAsignados)
            {
                <tr>
                    <td>@pedido.OrdenPedido.EmpresaCliente.NombreEmpresa</td>
                    <td>@(pedido.OrdenPedido.DeseaFactura == true ? "Si" : "No")</td>
                    <td>@pedido.OrdenPedido.AclaracionCliente</td>
                    <td>@pedido.OrdenPedido.MetodoPago</td>
                    <td>@pedido.EstadoPago</td>
                    <td>@pedido.EstadoEnvio</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => QuitarAsignacion(pedido)">Quitar</button>
                    </td>
                </tr>

            }

        </tbody>
    </table>
    @if (ListaPedidosAsignados.Count > 0)
    {
        <button class="btn btn-primary" @onclick=GuardarAsignacion>Guardar Asignacion</button>
    }
}
else
{
    <p>Cargando...</p>
}
@code {

    [Parameter]
    public AsignacionVechiculoConductorDTO ConductorSeleccionado { get; set; }

    public ServiceResponse<List<PedidoDTO>> ResponsePedido { get; set; }
    public List<PedidoDTO> ListaPedidosAsignados { get; set; } = new List<PedidoDTO>();
    public bool EsDistribuidora { get; set; } = false;
    public Guid IdEmpresaSesion { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IdEmpresaSesion = new Guid(await LocalStorage.GetItemAsync<string>("idEmpresa"));
        EsDistribuidora = await LocalStorage.GetItemAsync<bool>("EsDistribuidora");
        ResponsePedido = await _pedidosServices.ObtenerPedidosDistribuidoraPorId(IdEmpresaSesion);
        ResponsePedido.Data = ResponsePedido.Data.Where(p => p.EstadoEnvio.Equals("Entrega No Asignada")).ToList();
    }

    public void AsignarPedido(PedidoDTO pedido)
    {
        ListaPedidosAsignados.Add(pedido);
        ResponsePedido.Data.Remove(pedido);
        StateHasChanged();
    }

    public void QuitarAsignacion(PedidoDTO pedido)
    {
        ListaPedidosAsignados.Remove(pedido);
        ResponsePedido.Data.Add(pedido);
        StateHasChanged();
    }

    public void GuardarAsignacion()
    {
        foreach(var pedido in ListaPedidosAsignados)
        {
            AsignacionEntregaConductorDTO asignacion = new AsignacionEntregaConductorDTO();
            asignacion.IdConductorVehiculo = ConductorSeleccionado.Id;
            asignacion.IdPedido = pedido.Id;
            _pedidosServices.AsignarEntregaAconductor(asignacion);
        }

        NavigationManager.NavigateTo("/", forceLoad: true);
    }

}
