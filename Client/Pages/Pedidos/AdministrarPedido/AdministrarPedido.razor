@page "/administrarpedido"
@inject IPedidosServices _pedidosServices
@inject IInventarioServices _inventarioServices
@inject IDistribuidorasServices _distribuidoraServices
@inject IJSRuntime JsRuntime
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager


<h3>Administrar Pedido</h3>

@if (EsDistribuidora)
{
    @if (OrdenResponse != null)
    {
        <h4>Ordenes de pedido</h4>
        <table class="table">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">Nombre Cliente</th>
                    <th scope="col">Necesita Factura</th>
                    <th scope="col">Aclaracion Cliente</th>
                    <th scope="col">Metodo de Pago</th>
                    <th scope="col">Opciones</th>
                </tr>
            </thead>
            <tbody>

                @foreach (var orden in OrdenResponse.Data)
                {
                    @if (orden.PedidoConfirmado == false)
                    {
                        <tr>
                            <td>@orden.EmpresaCliente.NombreEmpresa</td>
                            <td>@(orden.DeseaFactura == true ? "Si" : "No")</td>
                            <td>@orden.AclaracionCliente</td>
                            <td>@orden.MetodoPago</td>
                            <td>
                                <button @onclick="() => AceptarPedido(orden)" type="button" class="btn btn-success">Aceptar Pedido</button>
                                <button @onclick="() => RechazarPedido(orden)" type="button" class="btn btn-danger ml-3">Rechazar Pedido</button>
                            </td>
                        </tr>
                    }

                }

            </tbody>
        </table>

        <div class="m-5"></div>
        <h4>Pedidos Confirmados</h4>
        <table class="table">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">Nombre Cliente</th>
                    <th scope="col">Necesita Factura</th>
                    <th scope="col">Aclaracion cliente</th>
                    <th scope="col">Metodo de Pago</th>
                    <th scope="col">Estado del pago</th>
                    <th scope="col">Estado del envio</th>
                    <th scope="col">Conductor</th>
                    <th scope="col">Detalle del pedido</th>
                </tr>
            </thead>
            <tbody>

                @foreach (var pedido in PedidoResponse.Data)
                {
                    <tr>
                        <td>@pedido.OrdenPedido.EmpresaCliente.NombreEmpresa</td>
                        <td>@(pedido.OrdenPedido.DeseaFactura == true ? "Si" : "No")</td>
                        <td>@pedido.OrdenPedido.AclaracionCliente</td>
                        <td>@pedido.OrdenPedido.MetodoPago</td>
                        <td>@pedido.EstadoPago</td>
                        <td>@pedido.EstadoEnvio</td>
                        <td>@(pedido.ConductorAsignado.Conductor.Nombre != "" ? pedido.ConductorAsignado.Conductor.Nombre: "N/A")</td>
                        <td>
                            <button @onclick="() => MostrarDetalle(pedido.OrdenPedidoId)" class="btn btn-primary">Ver detalle</button>
                        </td>
                    </tr>

                }

            </tbody>
        </table>
    }
}
else
{
    <p>Cargando...</p>
}

@if (AbrirModal)
{
    <Modal Title="Detalle orden"
       Lista=@ListaPedido
       OnClose="@CerrarModal"
       DialogType="Modal.ModalDialogType.Ok">
    </Modal>
}

@code
{
    public ServiceResponse<List<OrdenPedidoDTO>> OrdenResponse { get; set; }
    public ServiceResponse<List<PedidoDTO>> PedidoResponse { get; set; }
    public List<DetalleOrdenPedidoDTO> ListaPedido { get; set; }
    public bool EsDistribuidora { get; set; } = false;
    public Guid IdEmpresaSesion { get; set; }
    public bool AbrirModal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IdEmpresaSesion = new Guid(await LocalStorage.GetItemAsync<string>("idEmpresa"));
        EsDistribuidora = await LocalStorage.GetItemAsync<bool>("EsDistribuidora");
        OrdenResponse = await _pedidosServices.ObtenerOrdenesPedidosDistribuidoraPorId(IdEmpresaSesion);
        PedidoResponse = await _pedidosServices.ObtenerPedidosDistribuidoraPorId(IdEmpresaSesion);
    }

    private async Task CerrarModal()
    {
        AbrirModal = false;
        StateHasChanged();
    }

    public async void AceptarPedido(OrdenPedidoDTO orden)
    {
        ConfirmarPedidoDTO data = new ConfirmarPedidoDTO();
        data.Id = orden.Id;
        data.Aceptado = true;

        var response = await _pedidosServices.ConfirmarOrdenPedido(data);

        if (response.Success)
            await JsRuntime.InvokeVoidAsync("alert", "Se ha aceptado el pedido correctamente.");
        else
            await JsRuntime.InvokeVoidAsync("alert", "Ocurrio un problema.");

        StateHasChanged();
    }

    public async void RechazarPedido(OrdenPedidoDTO orden)
    {
        ConfirmarPedidoDTO data = new ConfirmarPedidoDTO();
        data.Id = orden.Id;
        data.Aceptado = false;

        var response = await _pedidosServices.ConfirmarOrdenPedido(data);

        if (response.Success)
            await JsRuntime.InvokeVoidAsync("alert", "Se ha rechazado el pedido correctamente.");
        else
            await JsRuntime.InvokeVoidAsync("alert", "Ocurrio un problema.");


        StateHasChanged();
    }

    public async void MostrarDetalle(Guid Id)
    {
        var response = await _pedidosServices.ObtenerDetalleOrdenPedidoPorIdOrden(Id);

        ListaPedido = response.Data;
        AbrirModal = true;
    }
}
