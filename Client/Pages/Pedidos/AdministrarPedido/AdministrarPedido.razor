@page "/administrarpedido"
@inject IPedidosServices _pedidosServices
@inject IInventarioServices _inventarioServices
@inject IDistribuidorasServices _distribuidoraServices
@inject IJSRuntime JsRuntime
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<h3>Administrar Pedido</h3>
@if (EsDistribuidora)
{
    @if (ListaOrdenes != null)
    {
        <h4>Ordenes de pedido</h4>
        <table class="table">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">Nombre Cliente</th>
                    <th scope="col">Factura</th>
                    <th scope="col">Aclaracion cliente</th>
                    <th scope="col">Metodo de Pago</th>
                    <th scope="col">Opciones</th>
                </tr>
            </thead>
            <tbody>
                
                @foreach (var orden in ListaOrdenes)
                {
                    @if (orden.PedidoConfirmado == false)
                    {
                        <tr>
                            <td>@BuscarNombreEmpresaCliente(orden.EmpresaClienteId)</td>
                            <td>@(orden.DeseaFactura == true ? "Si" : "No")</td>
                            <td>@orden.AclaracionCliente</td>
                            <td>@orden.MetodoPago</td>
                            <td>
                                <button @onclick="() => AceptarPedido()" type="button" class="btn btn-success">Aceptar Pedido</button>
                                <button @onclick="() => RechazarPedido(orden)" type="button" class="btn btn-danger ml-3">Rechazar Pedido</button>
                            </td>
                        </tr>
                    }

                }
                
            </tbody>
        </table>

        <h4>Pedidos Confirmados</h4>
    }
}
else
{
    <p>Este apartado solo tiene acceso las empresas distirbuidoras.</p>
}

@code {
    public ServiceResponse<List<EmpresaClienteDTO>> ResponseClientes { get; set; }
    public ServiceResponse<List<PedidoDTO>> ResponsePedidos { get; set; }
    public ServiceResponse<List<OrdenPedidoDTO>> ResponseOrdenes { get; set; }
    public ServiceResponse<List<DetalleOrdenPedidoDTO>> ResponseDetalleOrdenes { get; set; }
    public ServiceResponse<List<StockDTO>> ResponseStock { get; set; }
    public ServiceResponse<List<ProductoDTO>> ResponseProducto { get; set; }

    public List<PedidoDTO> ListaPedidos { get; set; } = new List<PedidoDTO>();
    public List<OrdenPedidoDTO> ListaOrdenes { get; set; } = new List<OrdenPedidoDTO>();
    public List<DetalleOrdenPedidoDTO> ListaDetalleOrdenes { get; set; } = new List<DetalleOrdenPedidoDTO>();
    public List<StockDTO> ListaDeStock { get; set; } = new List<StockDTO>();
    public List<ProductoDTO> ListaDeProducto { get; set; } = new List<ProductoDTO>();

    public bool EsDistribuidora { get; set; } = false;
    public Guid IdEmpresaSesion { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ResponseClientes = await _distribuidoraServices.ObtenerTodoEmpresaCliente();
        ResponsePedidos = await _pedidosServices.ObtenerTodosLosPedidos();
        ResponseOrdenes = await _pedidosServices.ObtenerTodosLosOrdenPedido();
        ResponseDetalleOrdenes = await _pedidosServices.ObtenerTodosLosDetalleOrdenPedido();
        ResponseStock = await _inventarioServices.ObtenerTodoStock();
        ResponseProducto = await _inventarioServices.ObtenerTodoProducto();

        IdEmpresaSesion = new Guid(await LocalStorage.GetItemAsync<string>("idEmpresa"));
        EsDistribuidora = await LocalStorage.GetItemAsync<bool>("EsDistribuidora");

        this.MostrarListadoOrdenes();
    }

    public void MostrarListadoOrdenes()
    {
        ListaPedidos = ResponsePedidos.Data;
        ListaDetalleOrdenes = ResponseDetalleOrdenes.Data;

        foreach (var detalle in ListaDetalleOrdenes)
        {
            Guid idEmpresa = ObtenerIdEmpresaPorStock(detalle.StockId);
            if (idEmpresa == IdEmpresaSesion)
            {
                ListaOrdenes.Add(ResponseOrdenes.Data.Where(p => p.Id.Equals(detalle.OrdenPedidoId)).FirstOrDefault());
            }
        }
    }

    public Guid ObtenerIdEmpresaPorStock(Guid StockId)
    {
        ListaDeStock = ResponseStock.Data;
        ListaDeProducto = ResponseProducto.Data;

        Guid idProducto = ListaDeStock.Where(p => p.Id.Equals(StockId)).FirstOrDefault().ProductoId;

        Guid idEmpresaDistribuidora = ListaDeProducto.Where(p => p.Id.Equals(idProducto)).FirstOrDefault().EmpresaDistribuidoraId;

        return idEmpresaDistribuidora;
    }

    public string BuscarNombreEmpresaCliente(Guid Id)
    {
        return ResponseClientes.Data.Where(p => p.Id.Equals(Id)).FirstOrDefault().NombreEmpresa;
    }

    public void AceptarPedido()
    {

    }

    public void RechazarPedido(OrdenPedidoDTO orden)
    {
        var ListaDetalle = ResponseDetalleOrdenes.Data.Where(p => p.OrdenPedidoId.Equals(orden.Id)).ToList();

        foreach(var detalle in ListaDetalle){
            _pedidosServices.EliminarDetalleOrdenPedido(detalle);
        }

        _pedidosServices.EliminarOrdenPedido(orden);

        ListaOrdenes = new List<OrdenPedidoDTO>();
        ListaDetalleOrdenes = new List<DetalleOrdenPedidoDTO>();

        actualizarLista();
        MostrarListadoOrdenes();

        StateHasChanged();
    }

    public async void actualizarLista()
    {
        ResponseOrdenes = await _pedidosServices.ObtenerTodosLosOrdenPedido();
        ResponseDetalleOrdenes = await _pedidosServices.ObtenerTodosLosDetalleOrdenPedido();
    }
}