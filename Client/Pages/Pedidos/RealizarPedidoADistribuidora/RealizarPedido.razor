@inject ILocalStorageService LocalStorage
@inject IPedidosServices _pedidosService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

@if (ListaMetodosPago != null && ProductosEnCarrito != null)
{
    <div class="m-5">
    </div>
    <!-- Productos en  carrito -->
    <div style="display: flex; justify-content: center;">
        <table class="table" style="width: 70%;">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">Nombre del producto</th>
                    <th scope="col">Descripcion del producto</th>
                    <th scope="col">Cantidad</th>
                    <th scope="col">Precio</th>
                    <th scope="col">Subtotal</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var producto in ProductosEnCarrito)
                {
                    <tr>
                        <td>@producto.Stock.Producto.Nombre</td>
                        <td>@producto.Stock.Producto.Descripcion</td>
                        <td>@producto.CantidadOrdenada</td>
                        <td>@producto.Stock.PrecioVentaPromedio</td>
                        <td>@CalcularSubtotal(@producto.Stock.PrecioVentaPromedio, @producto.CantidadOrdenada)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Formulario de pedido -->
    <div style="display: flex; justify-content: center;">
        <form style="width: 70%;">
            <fieldset class="form-group">
                <div class="form-group">
                    <label for="NombreRubro" class="form-label mt-4">Metodo Pago</label>
                    <select @bind=MetodoPago class="form-select form-select-lg mb-3" aria-label=".form-select-lg example">
                        @foreach (string metodoPago in ListaMetodosPago)
                        {
                            @if (metodoPago == "Tarjeta")
                            {
                                <option value=@MetodoPago disabled>@metodoPago</option>
                            }
                            else
                            {
                                <option value=@MetodoPago>@metodoPago</option>
                            }

                    }
                    </select>
                </div>

                <div class="form-group">
                    <label for="NombreRubro" class="form-label mt-4">Aclaracion</label>
                    <input @bind="AclaracionCliente" type="text" class="form-control" id="NombreRubro" placeholder="Ingrese si tiene alguna alclaracion sobre el pedido.">
                </div>
            </fieldset>

            <button @onclick="() => RealizarOrdenPedido()" type="button" class="btn btn-success">Realizar pedido</button>

        </form>
    </div>
}
@code {
    [Parameter]
    public List<DetalleOrdenPedidoDTO> ProductosEnCarrito { get; set; }

    [Parameter]
    public EmpresaDistribuidoraDTO EmpresaDistribuidora { get; set; }

    [Parameter]
    public string ClienteId { get; set; }

    public List<string> ListaMetodosPago { get; set; } = new List<string>();

    public bool DeseaFactura { get; set; }
    public string AclaracionCliente { get; set; }
    public string MetodoPago { get; set; }

    public ServiceResponse<OrdenPedidoDTO> OrdenPedidoResponse { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ListaMetodosPago.Add("Transferencia");
        ListaMetodosPago.Add("Tarjeta");

        ClienteId = await LocalStorage.GetItemAsync<string>("idEmpresa");
    }

    public decimal CalcularSubtotal(decimal precio, int cantidad)
    {
        return precio * cantidad;
    }

    public async void RealizarOrdenPedido()
    {

        OrdenPedidoDTO orden = new OrdenPedidoDTO();
        orden.EmpresaDistribuidoraId = EmpresaDistribuidora.Id;
        orden.EmpresaClienteId = new Guid(ClienteId);
        orden.DeseaFactura = DeseaFactura;
        orden.PedidoConfirmado = false;
        orden.AclaracionDistribuidor = null;
        orden.AclaracionCliente = AclaracionCliente;
        orden.CodigoQR = null;
        orden.MetodoPago = "Transferencia";

        OrdenPedidoResponse = await _pedidosService.CrearOrdenPedido(orden);

        foreach (var detalle in ProductosEnCarrito)
        {
            detalle.Stock = null;
            detalle.OrdenPedidoId = OrdenPedidoResponse.Data.Id;
            _pedidosService.CrearDetalleOrdenPedido(detalle);
        }

        await JsRuntime.InvokeVoidAsync("alert", "Pedido Realizado Correctamente!");
        NavigationManager.NavigateTo("");
    }
}
