@inject ILocalStorageService LocalStorage
@inject IDistribuidorasServices _distribuidoraService
@inject NavigationManager NavigationManager

<h3>Agregar distribuidora</h3>

@if (ResponseEmpresasDistribuidoras != null)
{
    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Nombre de la empresa</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    <select @bind=EmpresasDistribuidora.Id>
                        @foreach (var distribuidora in ResponseEmpresasDistribuidoras.Data)
                        {
                            <option value="@distribuidora.Id">@distribuidora.NombreEmpresa</option>
                        }
                    </select>
                </td>
                
            </tr>
        </tbody>
    </table>

    <button @onclick=GuardarEmpresa class="btn btn-success"> Guardar Empresa</button>
}


@code {
    public ServiceResponse<List<EmpresaDistribuidoraDTO>> ResponseEmpresasDistribuidoras { get; set; }
    public ServiceResponse<List<ClientesDistribuidoraDTO>> ResponseDistribuidorasDeCliente { get; set; }

    public EmpresaDistribuidoraDTO EmpresasDistribuidora { get; set; } = new EmpresaDistribuidoraDTO();
    public ClientesDistribuidoraDTO ClienteDistribuidora { get; set; } = new ClientesDistribuidoraDTO();
    public Guid IdEmpresaCliente { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IdEmpresaCliente = new Guid(await LocalStorage.GetItemAsync<string>("idEmpresa"));
        ResponseDistribuidorasDeCliente = await _distribuidoraService.ObtenerDistribuidorasDeCliente(IdEmpresaCliente);
        ResponseEmpresasDistribuidoras = await _distribuidoraService.ObtenerTodoDistribuidora();
    }

    public async void GuardarEmpresa()
    {
        ClienteDistribuidora.ClientesId = IdEmpresaCliente;
        ClienteDistribuidora.DistribuidorasId = EmpresasDistribuidora.Id;

        var response = await _distribuidoraService.InsertarDistribuidorasDeCliente(ClienteDistribuidora);

        if (response.Success)
            this.Volver();

    }

    public void CargarDatosEmpresa(EmpresaDistribuidoraDTO distribuidora)
    {
        EmpresasDistribuidora.EmailEmpresa = distribuidora.EmailEmpresa;
        EmpresasDistribuidora.RazonSocial = distribuidora.RazonSocial;
        StateHasChanged();
    }

    public void Volver()
    {
        NavigationManager.NavigateTo("/MisDistribuidoras", forceLoad: true);
    }


}
