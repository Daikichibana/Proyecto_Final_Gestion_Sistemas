@page "/AdministrarTipoProducto"
@using System.Reflection
@using Compartido
@using Compartido.Dto.Inventario.General
@inject IInventarioServices _inventarioService
@inject NavigationManager NavManager

<h3>Administrar Tipo Producto</h3>

<!-- Implementacion -->
@if (ListaTipoProducto != null && ListaTipoProducto.Success == true && VisibleListado == true)
{
    <div style="width: 100%; height: 30rem; display: flex; justify-content: center; align-items: center;">
        <div style="width: 70%;">
            @if (ListaTipoProducto.Data.Count > 0)
            {
                <table class="table table-bordered" style="width: 100%">
                    <thead>
                        <tr>
                            <th scope="col">Nombre del tipo de producto</th>
                            <th scope="col">Descripcion del tipo de producto</th>
                            <th scope="col">Opcion</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in ListaTipoProducto.Data)
                        {
                            <tr id="fila1" class="filaTabla">
                                <td>@item.Nombre</td>
                                <td>@item.Descripcion</td>
                                <td>
                                    <button @onclick="() => MostrarModificar(item)">Modificar</button>
                                    <button @onclick="() => EliminarTipoProducto(item)" class="txtElim" id="txtEliminar1">Eliminar</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No existen Tipos Productos registrados.</p>
            }
        </div>

        <!-- Boton  -->
    </div>
    <div style="display: flex; justify-content: center;">
        <button @onclick="MostrarRegistrar" type="submit" class="btn btn-primary" id="btnRegistrar" style="font-size: 20px;">
            Registrar nuevo
        </button>
    </div>
}
else if (VisibleEditar == true && TipoProductoSeleccionado != null)
{
    <ModificarTipoProducto 
        TipoProducto="@TipoProductoSeleccionado"
        MostrarListado="() => MostrarListado()"
        MostrarModificar="() => MostrarModificar(TipoProductoSeleccionado)" />
}
else if (VisibleRegistrar == true)
{
    <RegistrarTipoProducto 
        MostrarListado="() => MostrarListado()"
        MostrarRegistrar="() => MostrarRegistrar()" />
}
else
{
    <p>@Loading</p>
}



@code {
    public readonly string EnlaceRegistro = "RegistrarTipoProducto";
    public readonly string EnlaceModificar = "ModificarTipoProducto";
    public string Loading = "Cargando...";

    public ServiceResponse<List<TipoProductoDTO>> ListaTipoProducto { get; set; }
    public TipoProductoDTO TipoProductoSeleccionado { get; set; }

    public bool VisibleRegistrar { get; set; }
    public bool VisibleEditar { get; set; }
    public bool VisibleListado { get; set; }


    protected override async Task OnInitializedAsync()
    {
        VisibleListado = true;
        VisibleEditar = false;
        VisibleRegistrar = false;
        ListaTipoProducto = await _inventarioService.ObtenerTodosLosTipoProducto();
    }

    public void RedireccionarPagina(string enlace)
    {
        NavManager.NavigateTo(enlace);
        StateHasChanged();
    }

    public async void MostrarListado()
    {
        VisibleListado = true;
        VisibleEditar = false;
        VisibleRegistrar = false;
        ListaTipoProducto = await _inventarioService.ObtenerTodosLosTipoProducto();

        StateHasChanged();
    }

    public void MostrarRegistrar()
    {
        VisibleListado = false;
        VisibleEditar = false;
        VisibleRegistrar = true;

        StateHasChanged();
    }

    public void MostrarModificar(TipoProductoDTO tipoProducto)
    {
        VisibleListado = false;
        VisibleEditar = true;
        VisibleRegistrar = false;
        TipoProductoSeleccionado = tipoProducto;

        StateHasChanged();
    }

    public async void EliminarTipoProducto(TipoProductoDTO tipoProducto)
    {
        List<Guid> ids = new List<Guid>();
        ids.Add(tipoProducto.Id);
        var response = await _inventarioService.EliminarTipoProducto(ids);
        
        this.MostrarListado();
    }

}
