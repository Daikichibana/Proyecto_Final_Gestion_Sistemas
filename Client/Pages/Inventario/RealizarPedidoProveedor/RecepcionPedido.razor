@inject ILocalStorageService LocalStorage
@inject IInventarioServices _inventarioService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

@if (ListaMetodosPago != null && ProductosEnCarrito != null)
{
    <div class="m-5">
    </div>
    <!-- Productos en  carrito -->
    <h3>Detalle del pedido</h3>
    <div style="display: flex; justify-content: center;">
        <table class="table" style="width: 70%;">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">Nombre del producto</th>
                    <th scope="col">Descripcion del producto</th>
                    <th scope="col">Cantidad</th>
                    <th scope="col">Precio</th>
                    <th scope="col">Subtotal</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var producto in ProductosEnCarrito)
                {
                    <tr>
                        <td>@producto.Stock.Producto.Nombre</td>
                        <td>@producto.Stock.Producto.Descripcion</td>
                        <td>@producto.Cantidad</td>
                        <td>@producto.Stock.PrecioVentaPromedio</td>
                        <td>@CalcularSubtotal(@producto.Stock.PrecioVentaPromedio, @producto.Cantidad)</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Formulario de pedido -->
    <div style="display: flex; justify-content: center;">
         <button @onclick="() => RealizarOrdenPedido()" type="button" class="btn btn-success">Confirmar Rececpcion de Pedido</button>

    </div>
}

@code {
    [Parameter]
    public List<DetalleNotaRecepcionDTO> ProductosEnCarrito { get; set; }

    [Parameter]
    public EmpresaProveedorDTO Proveedor { get; set; }

    public string DistribuidoraId { get; set; }
    public List<string> ListaMetodosPago { get; set; } = new List<string>();
    public string DeseaFactura { get; set; } = "No";
    public string AclaracionCliente { get; set; }
    public string MetodoPago { get; set; }

    protected override async Task OnInitializedAsync()
    {
        DistribuidoraId = await LocalStorage.GetItemAsync<string>("idEmpresa");
    }

    public decimal CalcularSubtotal(decimal precio, int cantidad)
    {
        return precio * cantidad;
    }

    public async void RealizarOrdenPedido()
    {
        List<DetalleNotaRecepcionDTO> ListaDetalles = new List<DetalleNotaRecepcionDTO>();

        foreach (var detalle in ProductosEnCarrito)
        {
            DetalleNotaRecepcionDTO registroDetalle = new DetalleNotaRecepcionDTO();
            registroDetalle.Id = detalle.StockId;
            registroDetalle.Cantidad = detalle.Cantidad;

            ListaDetalles.Add(registroDetalle);
        }
        var fecha = DateTime.Now;

        NotaRecepcionDTO nota = new NotaRecepcionDTO();
        nota.DistribuidoraId = new Guid(DistribuidoraId);
        nota.ProveedorId = Proveedor.Id;
        nota.FechaCompra = fecha;

        await _inventarioService.RealizarPedidoProveedor(nota);
        await JsRuntime.InvokeVoidAsync("alert", "Compra Realizado Correctamente!");
        NavigationManager.NavigateTo("");
    }
}