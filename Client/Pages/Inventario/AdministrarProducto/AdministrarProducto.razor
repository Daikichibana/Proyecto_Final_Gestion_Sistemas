@page "/AdministrarProducto"
@using CAPAS.CAPA.DOMINIO
@using CAPAS.CAPA.DOMINIO.INVENTARIO.DTO
@inject IInventarioServices _inventarioService

<h3>Administrar Producto</h3>

<!-- Implementacion -->
@if (ListaProducto != null && ListaProducto.Success == true && VisibleListado == true)
{
    <div style="width: 100%; height: 30rem; display: flex; justify-content: center; align-items: center;">
        <div style="width: 70%;">
            @if (ListaProducto.Data.Count > 0)
            {
                <table class="table table-bordered" style="width: 100%">
                    <thead>
                        <tr>
                            <th scope="col">Nombre del tipo de producto</th>
                            <th scope="col">Descripcion del tipo de producto</th>
                            <th scope="col">Tipo de producto</th>
                            <th scope="col">Opcion</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in ListaProducto.Data)
                        {
                            <tr id="fila1" class="filaTabla">
                                <td>@item.Nombre</td>
                                <td>@item.Descripcion</td>
                                <td>@BuscarNombreTipoProducto(item.TipoProductoId)</td>
                                <td>
                                    <button @onclick="() => MostrarModificar(item)">Modificar</button>
                                    <button @onclick="() => EliminarProducto(item)">Eliminar</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No existen Productos registrados.</p>
            }
        </div>

        <!-- Boton  -->
    </div>
    <div style="display: flex; justify-content: center;">
        <button @onclick="MostrarRegistrar" type="submit" class="btn btn-primary" id="btnRegistrar" style="font-size: 20px;">
            Registrar nuevo
        </button>
    </div>
}
else if (VisibleEditar == true && ProductoSeleccionado != null)
{
    <ModificarProducto Producto="@ProductoSeleccionado"
                   ListaTipoProducto="ListaTipoProducto.Data"
                   MostrarListado="() => MostrarListado()"
                   MostrarModificar="() => MostrarModificar(ProductoSeleccionado)" />
}
else if (VisibleRegistrar == true)
{
    <RegistrarProducto ListaTipoProducto="ListaTipoProducto.Data"
                   MostrarListado="() => MostrarListado()"
                   MostrarRegistrar="() => MostrarRegistrar()" />
}
else
{
    <p>@Loading</p>
}

@code {
    public readonly string EnlaceRegistro = "RegistrarProducto";
    public readonly string EnlaceModificar = "ModificarProducto";
    public string Loading = "Cargando...";

    public ServiceResponse<List<ProductoDTO>> ListaProducto { get; set; }
    public ServiceResponse<List<TipoProductoDTO>> ListaTipoProducto { get; set; }
    public ProductoDTO ProductoSeleccionado { get; set; }


    public bool VisibleRegistrar { get; set; }
    public bool VisibleEditar { get; set; }
    public bool VisibleListado { get; set; }


    protected override async Task OnInitializedAsync()
    {
        VisibleListado = true;
        VisibleEditar = false;
        VisibleRegistrar = false;
        ListaTipoProducto = await _inventarioService.ObtenerTodoTipoProducto();
        ListaProducto = await _inventarioService.ObtenerTodoProducto();
    }

    public async void MostrarListado()
    {
        VisibleListado = true;
        VisibleEditar = false;
        VisibleRegistrar = false;
        ListaProducto = await _inventarioService.ObtenerTodoProducto();

        StateHasChanged();
    }

    public void MostrarRegistrar()
    {
        VisibleListado = false;
        VisibleEditar = false;
        VisibleRegistrar = true;

        StateHasChanged();
    }

    public void MostrarModificar(ProductoDTO Producto)
    {
        VisibleListado = false;
        VisibleEditar = true;
        VisibleRegistrar = false;
        ProductoSeleccionado = Producto;

        StateHasChanged();
    }

    public async void EliminarProducto(ProductoDTO Producto)
    {
        var response = await _inventarioService.EliminarProducto(Producto);

        this.MostrarListado();
    }

    public string BuscarNombreTipoProducto(Guid Id)
    {
        var result = (from tipoProducto in ListaTipoProducto.Data
                    where tipoProducto.Id == Id
                    select tipoProducto).FirstOrDefault();

        return result.Nombre;
    }
}
