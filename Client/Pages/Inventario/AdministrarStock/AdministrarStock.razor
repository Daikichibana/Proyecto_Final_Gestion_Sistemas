@page "/administrarStock"
@inject IInventarioServices _inventarioServices
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

<h3>Administrar Stock</h3>

@if (ResponseStock != null && Paginacion == 1)
{
    <button class="btn btn-success mb-2" @onclick=Registrar>Agregar Nuevo Producto</button>
    <button @onclick="() => Modificar()" type="button" class="btn btn-warning mb-2">Editar Productos</button>
    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Nombre del producto</th>
                <th scope="col">Cantidad</th>
                <th scope="col">Cantidad Ordenada</th>
                <th scope="col">Cantidad Pedida</th>
                <th scope="col">Precio Compra</th>
                <th scope="col">Precio Venta</th>
                <th scope="col">Opciones</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var productoStock in ResponseStock.Data)
            {

                <tr>

                    <td>@productoStock.Producto.Nombre</td>
                    <td>@productoStock.Cantidad</td>
                    <td>@productoStock.CantidadOrdenada</td>
                    <td>@productoStock.CantidadPedida</td>
                    <td>@productoStock.PrecioCompraPromedio</td>
                    <td>@productoStock.PrecioVentaPromedio</td>
                    <td>
                        <button @onclick="() => Eliminar(productoStock)" type="button" class="btn btn-danger ml-3">Eliminar</button>
                    </td>

                </tr>
            }

        </tbody>
    </table>
}
else if (Paginacion == 2)
{
    <RegistrarStock />
}
else if (Paginacion == 3)
{
    <ModificarStock ListaStock="ResponseStock"/>
}
else
{
    <p>@Loading</p>
}

@code 
{
    public ServiceResponse<List<StockDTO>> ResponseStock { get; set; }

    public string Loading { get; set; } = "Cargando...";
    public int Paginacion { get; set; } = 1;
    public Guid IdEmpresaSesion { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ResponseStock = await _inventarioServices.ObtenerTodosStock();
        IdEmpresaSesion = new Guid(await LocalStorage.GetItemAsync<string>("idEmpresa"));
        ResponseStock.Data = ResponseStock.Data.Where(p => p.Producto.EmpresaDistribuidoraId.Equals(IdEmpresaSesion)).ToList();
    }

    public void Registrar()
    {
        Paginacion = 2;
        StateHasChanged();
    }

    public void Modificar()
    {
        Paginacion = 3;
        StateHasChanged();
    }

    public async void Eliminar(StockDTO stock)
    {
        var response = await _inventarioServices.EliminarProducto(stock.ProductoId);

        if(response.Success)
            await JsRuntime.InvokeVoidAsync("alert", "Producto Eliminado Correctamente.");
        else
            await JsRuntime.InvokeVoidAsync("alert", "No se pudo eliminar correctamente el producto.");

        NavigationManager.NavigateTo("/AdministrarStock", forceLoad: true);
        StateHasChanged();
    }
}
