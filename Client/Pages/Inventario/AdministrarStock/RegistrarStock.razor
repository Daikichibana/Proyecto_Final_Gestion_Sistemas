@inject IInventarioServices _inventarioServices
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager

@if (ResponseTipoProducto != null)
{
    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Nombre del producto</th>
                <th scope="col">Tipo de Producto</th>
                <th scope="col">Descripcion</th>

                <th scope="col">Opciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var producto in ListaProductos)
            {
                producto.EmpresaDistribuidoraId = IdEmpresaSesion;

                <tr>
                    <td><input type="text" @bind=producto.Nombre /></td>
                    <td>
                        <select @bind=producto.TipoProductoId>
                            @foreach (var tipoProducto in ResponseTipoProducto.Data)
                            {
                                <option value="@tipoProducto.Id">@tipoProducto.Nombre</option>
                            }
                        </select>
                    </td>
                    <td><input type="text" @bind=producto.Descripcion /></td>
                    <td><button class="btn btn-danger" @onclick="() => QuitarProducto(producto)">Quitar Producto</button></td>
                </tr>
            }
        </tbody>
    </table>

    <button @onclick=AgregarProducto class="btn btn-primary"> Agregar Producto </button>
    <button @onclick=GuardarProductos class="btn btn-success"> Guardar Productos</button>
}

@code
{
    public ServiceResponse<List<TipoProductoDTO>> ResponseTipoProducto { get; set; }
    public List<ProductoDTO> ListaProductos { get; set; }
    public Guid IdEmpresaSesion { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ListaProductos = new List<ProductoDTO>();
        IdEmpresaSesion = new Guid(await LocalStorage.GetItemAsync<string>("idEmpresa"));
        ResponseTipoProducto = await _inventarioServices.ObtenerTodosLosTipoProducto();
    }

    public void AgregarProducto()
    {
        ProductoDTO producto = new ProductoDTO();
        ListaProductos.Add(producto);
        StateHasChanged();
    }

    public void QuitarProducto(ProductoDTO producto)
    {
        ListaProductos.Remove(producto);
        StateHasChanged();
    }

    public async void GuardarProductos()
    {
        if (ListaProductos.Count > 0)
        {
            var response = await _inventarioServices.InsertarProducto(ListaProductos);

            if (response.Success)
                await JsRuntime.InvokeVoidAsync("alert", "Productos Agregados Correctamente.");
            else
                await JsRuntime.InvokeVoidAsync("alert", "No se pudo agregar correctamente los productos.");

            NavigationManager.NavigateTo("/administrarStock", forceLoad: true);
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Debes agregar productos a la lista.");
        }
    }

}

