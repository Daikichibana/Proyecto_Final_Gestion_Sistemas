@*@page "/AdministrarConductor"

@using System.Reflection
@using Compartido
@using Compartido.Dto.Personal.General
@inject IPersonalServices _personalService
@inject NavigationManager NavManager
@inject ILocalStorageService LocalStorage

<h3>Administrar Conductor</h3>


<!-- Implementacion -->
@if (ListaConductor != null && ListaConductor.Success == true && VisibleListado == true)
{
    <div style="width: 100%; height: 30rem; display: flex; justify-content: center; align-items: center;">
        <div style="width: 70%;">
            @if (ListaConductor.Data.Count > 0)
            {
                <table class="table table-bordered" style="width: 100%">
                    <thead>
                        <tr>
                            <th scope="col">Nombre</th>
                            <th scope="col">Apellido</th>
                            <th scope="col">CI</th>
                            <th scope="col">Fecha Nacimiento</th>
                            <th scope="col">Email</th>
                            <th scope="col">Telefono</th>
                            <th scope="col">Opcion</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in ListaConductor.Data)
                        {
                            <tr id="fila1" class="filaTabla">
                                <td>@item.Nombre</td>
                                <td>@item.Apellido</td>
                                <td>@item.Ci</td>
                                <td>@item.FechaNacimiento</td>
                                <td>@item.Email</td>
                                <td>@item.Telefono</td>
                                <td>
                                    <button @onclick="() => MostrarModificar(item)">Modificar</button>
                                    <button @onclick="() => EliminarConductor(item)">Eliminar</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No existen Sucursales registradas.</p>
            }
        </div>

        <!-- Boton  -->
    </div>
    <div style="display: flex; justify-content: center;">
        <button @onclick="MostrarRegistrar" type="submit" class="btn btn-primary" id="btnRegistrar" style="font-size: 20px;">
            Registrar nuevo
        </button>
    </div>
}
else if (VisibleEditar == true && ConductorSeleccionado != null)
{
    <ModificarConductor 
        Conductor="@ConductorSeleccionado"
        MostrarListado="() => MostrarListado()"
        MostrarModificar="() => MostrarModificar(ConductorSeleccionado)" />
}
else if (VisibleRegistrar == true)
{
    <RegistrarConductor 
        MostrarListado="() => MostrarListado()"
        MostrarRegistrar="() => MostrarRegistrar()" />
}
else
{
    <p>@Loading</p>
}

@code {
    public readonly string EnlaceRegistro = "RegistrarConductor";
    public readonly string EnlaceModificar = "ModificarConductor";
    public string Loading = "Cargando...";

    public ServiceResponse<List<ConductorDTO>> ListaConductor { get; set; }
    public ConductorDTO ConductorSeleccionado { get; set; }

    public bool VisibleRegistrar { get; set; }
    public bool VisibleEditar { get; set; }
    public bool VisibleListado { get; set; }
    public string Distribuidora;

    protected override async Task OnInitializedAsync()
    {
        VisibleListado = true;
        VisibleEditar = false;
        VisibleRegistrar = false;
        ListaConductor = await _personalService.ObtenerTodosLosConductores();
        Distribuidora = await LocalStorage.GetItemAsync<string>("idEmpresa");
        this.MostrarListado();
        StateHasChanged();
    }



    public void RedireccionarPagina(string enlace)
    {
        NavManager.NavigateTo(enlace);
        StateHasChanged();
    }

    public async void MostrarListado()
    {
        VisibleListado = true;
        VisibleEditar = false;
        VisibleRegistrar = false;
        ListaConductor = await _personalService.ObtenerTodosLosConductores();
        Guid dist = new Guid(Distribuidora);
        ListaConductor.Data = ListaConductor.Data.Where(t => t.EmpresaDistribuidoraId.Equals(dist)).ToList();


        StateHasChanged();
    }

    public void MostrarRegistrar()
    {
        VisibleListado = false;
        VisibleEditar = false;
        VisibleRegistrar = true;

        StateHasChanged();
    }

    public void MostrarModificar(ConductorDTO conductorDTO)
    {
        VisibleListado = false;
        VisibleEditar = true;
        VisibleRegistrar = false;
        ConductorSeleccionado = conductorDTO;

        StateHasChanged();
    }

    public async void EliminarConductor(ConductorDTO conductorDTO)
    {
        var response = await _personalService.EliminarConductor(conductorDTO);
        
        this.MostrarListado();
    }

}*@