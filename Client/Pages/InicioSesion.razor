@page "/login"
@using Microsoft.AspNetCore.Components
@using Compartido.Dto.Personal
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject IPersonalServices _personalService
@inject IJSRuntime JsRuntime

<h3>Inicio sesion</h3>

<EditForm Model="user" OnSubmit="HandleLogin">
    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" @bind-Value="user.NombreUsuario" class="form-control" />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Clave" type="password" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Iniciar Sesion</button>
</EditForm>


@code {

    private UsuarioDTO user = new UsuarioDTO();

    private async void HandleLogin()
    {
        var DatoInicioSesion = await _personalService.IniciarSesion(user);


        if (DatoInicioSesion.Success)
        {
            Console.WriteLine("Log me in!");
            string rolesConcatenados = "";

            foreach (var rol in DatoInicioSesion.Data.Roles)
            {
                rolesConcatenados += $"{rol.RolId},";
            }

            await LocalStorage.SetItemAsync<string>("username", DatoInicioSesion.Data.NombreUsuario);
            await LocalStorage.SetItemAsync<string>("idEmpresa", DatoInicioSesion.Data.IdEmpresa.ToString());
            await LocalStorage.SetItemAsync<string>("roles", rolesConcatenados);
            await LocalStorage.SetItemAsync<bool>("EsDistribuidora", DatoInicioSesion.Data.EsDistribuidora);
            await LocalStorage.SetItemAsync<string>("NombreEmpresa", DatoInicioSesion.Data.NombreEmpresa);
            await AuthStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo("", forceLoad: true);
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("alert", "Usuario no valido.");
        }
    }

}
