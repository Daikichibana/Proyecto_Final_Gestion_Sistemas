@*@page "/AdministrarRubro"
@using Compartido
@using Compartido.Dto.Distribuidora.General
@inject IDistribuidorasServices _distribuidorasService
<h3>Administrar Rubro</h3>

<!-- Implementacion -->
@if (ListaRubro is {Success: true } && VisibleListado == true)
{
    <div style="width: 100%; height: 30rem; display: flex; justify-content: center; align-items: center;">
        <div style="width: 70%;">
            @if (ListaRubro.Data.Count > 0)
            {
                <table class="table table-bordered" style="width: 100%">
                    <thead>
                        <tr>
                            <th scope="col">Nombre del tipo de Rubro</th>
                            <th scope="col">Descripcion del tipo de Rubro</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in ListaRubro.Data)
                        {
                            <tr id="fila1" class="filaTabla">
                                <td>@item.Nombre</td>
                                <td>@item.Descripcion</td>
                                <td>
                                    <button @onclick="() => MostrarModificar(item)">Modificar</button>
                                    <button @onclick="() => EliminarRubro(item)">Eliminar</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No existen Rubros registrados.</p>
            }
        </div>

        <!-- Boton  -->
    </div>
    <div style="display: flex; justify-content: center;">
        <button @onclick="MostrarRegistrar" type="submit" class="btn btn-primary" id="btnRegistrar" style="font-size: 20px;">
            Registrar nuevo
        </button>
    </div>
}
else if (VisibleEditar == true && RubroSeleccionado != null)
{
    <ModificarRubro Rubro="@RubroSeleccionado"
                   MostrarListado="() => MostrarListado()"
                   MostrarModificar="() => MostrarModificar(RubroSeleccionado)" />
}
else if (VisibleRegistrar == true)
{
    <RegistrarRubro 
                   MostrarListado="() => MostrarListado()"
                   MostrarRegistrar="() => MostrarRegistrar()" />
}
else
{
    <p>@Loading</p>
}


@code {
    public readonly string EnlaceRegistro = "RegistrarRubro";
    public readonly string EnlaceModificar = "ModificarRubro";
    public string Loading = "Cargando...";

    public ServiceResponse<List<RubroDTO>> ListaRubro { get; set; }
    public RubroDTO RubroSeleccionado { get; set; }


    public bool VisibleRegistrar { get; set; }
    public bool VisibleEditar { get; set; }
    public bool VisibleListado { get; set; }


    protected override async Task OnInitializedAsync()
    {
        VisibleListado = true;
        VisibleEditar = false;
        VisibleRegistrar = false;
        ListaRubro = await _distribuidorasService.ObtenerTodoRubro();
    }

    public async void MostrarListado()
    {
        VisibleListado = true;
        VisibleEditar = false;
        VisibleRegistrar = false;
        ListaRubro = await _distribuidorasService.ObtenerTodoRubro();

        StateHasChanged();
    }

    public void MostrarRegistrar()
    {
        VisibleListado = false;
        VisibleEditar = false;
        VisibleRegistrar = true;

        StateHasChanged();
    }

    public void MostrarModificar(RubroDTO Rubro)
    {
        VisibleListado = false;
        VisibleEditar = true;
        VisibleRegistrar = false;
        RubroSeleccionado = Rubro;

        StateHasChanged();
    }

    public async void EliminarRubro(RubroDTO Rubro)
    {
        var response = await _distribuidorasService.EliminarRubro(Rubro);

        this.MostrarListado();
    }
}
*@