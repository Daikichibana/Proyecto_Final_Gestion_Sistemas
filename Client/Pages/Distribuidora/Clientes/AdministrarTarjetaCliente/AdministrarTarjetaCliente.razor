@*@page "/AdministrarTarjetaCliente"
@using System.Reflection
@using Compartido
@using Compartido.Dto.Distribuidora.General
@inject IDistribuidorasServices _distribuidoraService
@inject NavigationManager NavManager
@inject ILocalStorageService LocalStorage

<h3>AdministrarTarjetaCliente</h3>


<!-- Implementacion -->
@if (ListaTarjetaCliente != null && ListaTarjetaCliente.Success == true && VisibleListado == true)
{
    <div style="width: 100%; height: 30rem; display: flex; justify-content: center; align-items: center;">
        <div style="width: 70%;">
            @if (ListaTarjetaCliente.Data.Count > 0)
            {
                <table class="table table-bordered" style="width: 100%">
                    <thead>
                        <tr>
                            <th scope="col">Numero de Tarjeta</th>
                            <th scope="col">Fecha de Expiracion</th>
                            <th scope="col">Nombre del Titular</th>
                            <th scope="col">Opcion</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in ListaTarjetaCliente.Data)
                        {
                            <tr id="fila1" class="filaTabla">
                                <td>@item.NumeroTarjeta</td>
                                <td>@item.FechaExpiracion</td>
                                <td>@item.NombreTitular</td>
                                <td>
                                    <button @onclick="() => MostrarModificar(item)">Modificar</button>
                                    <button @onclick="() => EliminarTarjetaCliente(item)">Eliminar</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p>No existen tarjetas registradas.</p>
            }
        </div>

        <!-- Boton  -->
    </div>
    <div style="display: flex; justify-content: center;">
        <button @onclick="MostrarRegistrar" type="submit" class="btn btn-primary" id="btnRegistrar" style="font-size: 20px;">
            Registrar nuevo
        </button>
    </div>
}
else if (VisibleEditar == true && TarjetaClienteSeleccionada != null)
{
    <ModificarTarjetaCliente 
        TarjetaCliente="@TarjetaClienteSeleccionada"
        MostrarListado="() => MostrarListado()"
        MostrarModificar="() => MostrarModificar(TarjetaClienteSeleccionada)" />
}
else if (VisibleRegistrar == true)
{
    <RegistrarTarjetaCliente 
        MostrarListado="() => MostrarListado()"
        MostrarRegistrar="() => MostrarRegistrar()" />
}
else
{
    <p>@Loading</p>
}

@code {
    public readonly string EnlaceRegistro = "RegistrarTarjetaCliente";
    public readonly string EnlaceModificar = "ModificarTarjetaCliente";
    public string Loading = "Cargando...";

    public ServiceResponse<List<TarjetaClienteDTO>> ListaTarjetaCliente { get; set; }
    public TarjetaClienteDTO TarjetaClienteSeleccionada { get; set; }

    public bool VisibleRegistrar { get; set; }
    public bool VisibleEditar { get; set; }
    public bool VisibleListado { get; set; }
    public string Distribuidora;

    protected override async Task OnInitializedAsync()
    {
        VisibleListado = true;
        VisibleEditar = false;
        VisibleRegistrar = false;
        ListaTarjetaCliente = await _distribuidoraService.ObtenerTodoTarjetaCliente();
        Distribuidora = await LocalStorage.GetItemAsync<string>("idEmpresa");
        this.MostrarListado();
        StateHasChanged();
    }



    public void RedireccionarPagina(string enlace)
    {
        NavManager.NavigateTo(enlace);
        StateHasChanged();
    }

    public async void MostrarListado()
    {
        VisibleListado = true;
        VisibleEditar = false;
        VisibleRegistrar = false;
        ListaTarjetaCliente = await _distribuidoraService.ObtenerTodoTarjetaCliente();
        Guid dist = new Guid(Distribuidora);
        ListaTarjetaCliente.Data = ListaTarjetaCliente.Data.Where(t => t.EmpresaClienteId.Equals(dist)).ToList();


        StateHasChanged();
    }

    public void MostrarRegistrar()
    {
        VisibleListado = false;
        VisibleEditar = false;
        VisibleRegistrar = true;

        StateHasChanged();
    }

    public void MostrarModificar(TarjetaClienteDTO tarjetaClienteDTO)
    {
        VisibleListado = false;
        VisibleEditar = true;
        VisibleRegistrar = false;
        TarjetaClienteSeleccionada = tarjetaClienteDTO;

        StateHasChanged();
    }

    public async void EliminarTarjetaCliente(TarjetaClienteDTO tarjetaClienteDTO)
    {
        var response = await _distribuidoraService.EliminarTarjetaCliente(tarjetaClienteDTO);
        
        this.MostrarListado();
    }

}*@