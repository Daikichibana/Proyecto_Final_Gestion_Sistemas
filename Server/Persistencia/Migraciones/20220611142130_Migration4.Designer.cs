// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Proyecto_Final_Gestion_Sistemas.Server.Persistencia;

namespace Proyecto_Final_Gestion_Sistemas.Server.Persistencia.Migraciones
{
    [DbContext(typeof(BaseDatosContext))]
    [Migration("20220611142130_Migration4")]
    partial class Migration4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.AsignacionVechiculoConductor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConductorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("FechaAsignacion")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("VechiculoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConductorId");

                    b.HasIndex("VechiculoId");

                    b.ToTable("AsignacionVechiculoConductor");
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.EmpresaCliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmailEmpresa")
                        .HasColumnType("text");

                    b.Property<Guid>("NITId")
                        .HasColumnType("uuid");

                    b.Property<string>("NombreEmpresa")
                        .HasColumnType("text");

                    b.Property<string>("RazonSocial")
                        .HasColumnType("text");

                    b.Property<Guid>("ResponsableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RubroId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("NITId");

                    b.HasIndex("ResponsableId");

                    b.HasIndex("RubroId");

                    b.ToTable("EmpresaCliente");
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.EmpresaDistribuidora", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmailEmpresa")
                        .HasColumnType("text");

                    b.Property<Guid>("NITId")
                        .HasColumnType("uuid");

                    b.Property<string>("NombreEmpresa")
                        .HasColumnType("text");

                    b.Property<string>("RazonSocial")
                        .HasColumnType("text");

                    b.Property<Guid>("ResponsableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RubroId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("NITId");

                    b.HasIndex("ResponsableId");

                    b.HasIndex("RubroId");

                    b.ToTable("EmpresaDistribuidora");
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.EmpresaProveedor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EmailEmpresa")
                        .HasColumnType("text");

                    b.Property<Guid>("EmpresaDistribuidoraId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("NITId")
                        .HasColumnType("uuid");

                    b.Property<string>("NombreEmpresa")
                        .HasColumnType("text");

                    b.Property<string>("RazonSocial")
                        .HasColumnType("text");

                    b.Property<Guid>("ResponsableId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RubroId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaDistribuidoraId");

                    b.HasIndex("NITId");

                    b.HasIndex("ResponsableId");

                    b.HasIndex("RubroId");

                    b.ToTable("EmpresaProveedor");
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.NIT", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NombreFacturacion")
                        .HasColumnType("text");

                    b.Property<string>("NumeroNIT")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("NIT");
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.Rubro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Rubro");
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.Sucursales", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Direccion")
                        .HasColumnType("text");

                    b.Property<Guid>("EmpresaDistribuidoraId")
                        .HasColumnType("uuid");

                    b.Property<int>("NroSucursal")
                        .HasColumnType("integer");

                    b.Property<string>("Telefono")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaDistribuidoraId");

                    b.ToTable("Sucursales");
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.TarjetaCliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NombreTitular")
                        .HasColumnType("text");

                    b.Property<int>("NumeroTarjeta")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("TarjetaCliente");
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.Vechiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConductorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Marca")
                        .HasColumnType("text");

                    b.Property<string>("Modelo")
                        .HasColumnType("text");

                    b.Property<string>("Placa")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConductorId");

                    b.ToTable("Vechiculo");
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Personal.Dominio.Entidades.Conductor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Apellido")
                        .HasColumnType("text");

                    b.Property<string>("Ci")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<Guid>("EmpresaDistribuidoraId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<string>("Telefono")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaDistribuidoraId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Conductor");
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Personal.Dominio.Entidades.ResponsableAlmacen", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Apellido")
                        .HasColumnType("text");

                    b.Property<string>("Ci")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DistribuidoraId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<string>("Telefono")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DistribuidoraId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ResponsableAlmacen");
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Personal.Dominio.Entidades.ResponsableEmpresa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Apellido")
                        .HasColumnType("text");

                    b.Property<string>("Ci")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<string>("Telefono")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ResponsableEmpresa");
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Personal.Dominio.Entidades.Rol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Rol");
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Personal.Dominio.Entidades.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Clave")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("NombreUsuario")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Personal.Dominio.Entidades.UsuariosRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("RolId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("UsuariosRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.AsignacionVechiculoConductor", b =>
                {
                    b.HasOne("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Personal.Dominio.Entidades.Conductor", "Conductor")
                        .WithMany()
                        .HasForeignKey("ConductorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.Vechiculo", "Vechiculo")
                        .WithMany()
                        .HasForeignKey("VechiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conductor");

                    b.Navigation("Vechiculo");
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.EmpresaCliente", b =>
                {
                    b.HasOne("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.NIT", "NIT")
                        .WithMany()
                        .HasForeignKey("NITId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Personal.Dominio.Entidades.ResponsableEmpresa", "Responsable")
                        .WithMany()
                        .HasForeignKey("ResponsableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.Rubro", "Rubro")
                        .WithMany()
                        .HasForeignKey("RubroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NIT");

                    b.Navigation("Responsable");

                    b.Navigation("Rubro");
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.EmpresaDistribuidora", b =>
                {
                    b.HasOne("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.NIT", "NIT")
                        .WithMany()
                        .HasForeignKey("NITId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Personal.Dominio.Entidades.ResponsableEmpresa", "Responsable")
                        .WithMany()
                        .HasForeignKey("ResponsableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.Rubro", "Rubro")
                        .WithMany()
                        .HasForeignKey("RubroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NIT");

                    b.Navigation("Responsable");

                    b.Navigation("Rubro");
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.EmpresaProveedor", b =>
                {
                    b.HasOne("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.EmpresaDistribuidora", "EmpresaDistribuidora")
                        .WithMany()
                        .HasForeignKey("EmpresaDistribuidoraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.NIT", "NIT")
                        .WithMany()
                        .HasForeignKey("NITId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Personal.Dominio.Entidades.ResponsableEmpresa", "Responsable")
                        .WithMany()
                        .HasForeignKey("ResponsableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.Rubro", "Rubro")
                        .WithMany()
                        .HasForeignKey("RubroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmpresaDistribuidora");

                    b.Navigation("NIT");

                    b.Navigation("Responsable");

                    b.Navigation("Rubro");
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.Sucursales", b =>
                {
                    b.HasOne("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.EmpresaDistribuidora", "EmpresaDistribuidora")
                        .WithMany()
                        .HasForeignKey("EmpresaDistribuidoraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmpresaDistribuidora");
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.Vechiculo", b =>
                {
                    b.HasOne("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Personal.Dominio.Entidades.Conductor", "Conductor")
                        .WithMany()
                        .HasForeignKey("ConductorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conductor");
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Personal.Dominio.Entidades.Conductor", b =>
                {
                    b.HasOne("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.EmpresaDistribuidora", "EmpresaDistribuidora")
                        .WithMany()
                        .HasForeignKey("EmpresaDistribuidoraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Personal.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmpresaDistribuidora");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Personal.Dominio.Entidades.ResponsableAlmacen", b =>
                {
                    b.HasOne("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Distribuidora.Dominio.Entidades.EmpresaDistribuidora", "Distribuidora")
                        .WithMany()
                        .HasForeignKey("DistribuidoraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Personal.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Distribuidora");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Personal.Dominio.Entidades.ResponsableEmpresa", b =>
                {
                    b.HasOne("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Personal.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Personal.Dominio.Entidades.UsuariosRoles", b =>
                {
                    b.HasOne("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Personal.Dominio.Entidades.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Proyecto_Final_Gestion_Sistemas.Server.Modulos.Personal.Dominio.Entidades.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("Usuario");
                });
#pragma warning restore 612, 618
        }
    }
}
